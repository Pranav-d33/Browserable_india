# =============================================================================
# Bharat Agents - Browser Service Environment Configuration
# =============================================================================
# 
# This file contains environment variables specific to the Browser service.
# Copy this file to .env.development.local and update the values.
#
# IMPORTANT: Never commit real secrets to version control!
# Use Doppler, 1Password, AWS SSM, or similar secret management tools.
# =============================================================================

# =============================================================================
# SERVICE CONFIGURATION
# =============================================================================

# Service name for logging and identification
SERVICE_NAME=browser

# Service port (should not conflict with other services)
PORT=3002

# Node.js environment
NODE_ENV=development

# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================

# PostgreSQL connection URL
# For local development, use the shared database
POSTGRES_URL=postgresql://bharat_user:bharat_password@localhost:5432/bharat_agents

# =============================================================================
# CACHE CONFIGURATION
# =============================================================================

# Redis connection URL
# For local development, use the shared Redis instance
REDIS_URL=redis://localhost:6379/0

# =============================================================================
# STORAGE CONFIGURATION
# =============================================================================

# S3-compatible storage endpoint
# For local development, use MinIO
S3_ENDPOINT=http://localhost:9000

# S3 access key
S3_ACCESS_KEY=minioadmin

# S3 secret key
S3_SECRET_KEY=minioadmin

# =============================================================================
# SECURITY CONFIGURATION
# =============================================================================

# JWT secret for token signing (minimum 32 characters)
# Use a strong random string for production
JWT_SECRET=your_very_long_jwt_secret_key_at_least_32_characters_long_here

# =============================================================================
# AI/ML CONFIGURATION (Optional in Phase 0)
# =============================================================================

# OpenAI API key (optional - will use Gemini 2.0 Flash by default)
# Only required if you want to use OpenAI models
# OPENAI_API_KEY=sk-your-openai-api-key-here

# =============================================================================
# BROWSER AUTOMATION CONFIGURATION
# =============================================================================

# Maximum concurrent browser sessions
BROWSER_MAX_CONCURRENT=4

# Session idle timeout (in milliseconds)
SESSION_IDLE_MS=300000

# Maximum navigation timeout (in milliseconds)
MAX_NAVIGATION_TIMEOUT_MS=30000

# Security configuration
ALLOW_EVALUATE=false
BLOCK_PRIVATE_ADDR=true
ALLOW_LOCALHOST=false
ALLOW_DOWNLOADS=false

# Rate limiting
RATE_LIMIT_WINDOW_MS=900000

# Maximum requests per window
RATE_LIMIT_MAX_REQUESTS=100

# =============================================================================
# SESSION STORE CONFIGURATION
# =============================================================================

# Session store type (memory for Phase 1, redis for Phase 3)
SESSION_STORE_TYPE=memory

# Redis URL for session store (required when SESSION_STORE_TYPE=redis)
# SESSION_STORE_REDIS_URL=redis://localhost:6379/1

# =============================================================================
# OPENTELEMETRY CONFIGURATION
# =============================================================================

# OTLP endpoint for traces and metrics
# OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4318

# OTLP headers (JSON format)
# OTEL_EXPORTER_OTLP_HEADERS={"authorization": "Bearer your-token"}

# =============================================================================
# LOGGING CONFIGURATION
# =============================================================================

# Log level (debug, info, warn, error)
LOG_LEVEL=debug

# Enable request logging
ENABLE_REQUEST_LOGGING=true

# Enable browser automation logging
ENABLE_BROWSER_LOGGING=true

# =============================================================================
# DEVELOPMENT-SPECIFIC CONFIGURATION
# =============================================================================

# Enable hot reloading
ENABLE_HOT_RELOAD=true

# Enable detailed error messages
ENABLE_DETAILED_ERRORS=true

# Enable CORS for development
ENABLE_CORS=true

# CORS origin (for development)
CORS_ORIGIN=http://localhost:3000

# Enable browser debugging
ENABLE_BROWSER_DEBUGGING=true

# =============================================================================
# SECRET MANAGEMENT RECOMMENDATIONS
# =============================================================================
#
# For production environments, use one of these secret management solutions:
#
# 1. Doppler (Recommended)
#    - Install: curl -Ls --tlsv1.2 --proto "=https" --retry 3 https://cli.doppler.com/install.sh | sh
#    - Setup: doppler setup
#    - Usage: doppler run -- pnpm dev
#
# 2. 1Password CLI
#    - Install: brew install 1password-cli (macOS) or download from 1password.com
#    - Setup: op signin
#    - Usage: op run -- pnpm dev
#
# 3. AWS Systems Manager Parameter Store
#    - Store secrets as SecureString parameters
#    - Use AWS SDK to retrieve in application
#    - IAM roles required for access
#
# =============================================================================

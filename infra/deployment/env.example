# =============================================================================
# Bharat Agents - Deployment Environment Configuration
# =============================================================================
# 
# This file contains environment variables for deployment infrastructure.
# Copy this file to .env and update the values for your deployment environment.
#
# IMPORTANT: Never commit real secrets to version control!
# Use Doppler, 1Password, AWS SSM, or similar secret management tools.
# =============================================================================

# =============================================================================
# DOCKER COMPOSE CONFIGURATION
# =============================================================================

# Docker Compose project name
# Used to namespace containers and networks
COMPOSE_PROJECT_NAME=bharat-agents

# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================

# PostgreSQL database name
POSTGRES_DB=bharat_agents

# PostgreSQL username
POSTGRES_USER=bharat_user

# PostgreSQL password (store securely!)
# Use secret management tools for production
POSTGRES_PASSWORD=your_secure_postgres_password_here

# PostgreSQL host (usually localhost for Docker Compose)
POSTGRES_HOST=localhost

# PostgreSQL port (default: 5432)
POSTGRES_PORT=5432

# PostgreSQL connection URL (auto-generated from above)
POSTGRES_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}

# =============================================================================
# REDIS CONFIGURATION
# =============================================================================

# Redis password (optional, but recommended for production)
# Use secret management tools for production
REDIS_PASSWORD=your_secure_redis_password_here

# Redis host (usually localhost for Docker Compose)
REDIS_HOST=localhost

# Redis port (default: 6379)
REDIS_PORT=6379

# Redis database number (0-15)
REDIS_DB=0

# Redis connection URL (auto-generated from above)
REDIS_URL=redis://:${REDIS_PASSWORD}@${REDIS_HOST}:${REDIS_PORT}/${REDIS_DB}

# =============================================================================
# MINIO (S3-COMPATIBLE STORAGE) CONFIGURATION
# =============================================================================

# MinIO root user (access key)
MINIO_ROOT_USER=minioadmin

# MinIO root password (secret key)
# Use secret management tools for production
MINIO_ROOT_PASSWORD=your_secure_minio_password_here

# MinIO host (usually localhost for Docker Compose)
MINIO_HOST=localhost

# MinIO port (default: 9000)
MINIO_PORT=9000

# MinIO console port (default: 9001)
MINIO_CONSOLE_PORT=9001

# S3 endpoint URL (auto-generated from above)
S3_ENDPOINT=http://${MINIO_HOST}:${MINIO_PORT}

# S3 access key (same as MinIO root user)
S3_ACCESS_KEY=${MINIO_ROOT_USER}

# S3 secret key (same as MinIO root password)
S3_SECRET_KEY=${MINIO_ROOT_PASSWORD}

# =============================================================================
# APPLICATION CONFIGURATION
# =============================================================================

# Node.js environment
NODE_ENV=development

# Application port for tasks service
TASKS_PORT=3001

# Application port for browser service
BROWSER_PORT=3002

# =============================================================================
# MAILHOG CONFIGURATION (Email Testing)
# =============================================================================

# MailHog web UI port
MAILHOG_PORT=8025

# MailHog SMTP port
MAILHOG_SMTP_PORT=1025

# =============================================================================
# SECURITY CONFIGURATION
# =============================================================================

# JWT secret for token signing (minimum 32 characters)
# Generate a strong random string for production
# Example: openssl rand -base64 32
JWT_SECRET=your_very_long_jwt_secret_key_at_least_32_characters_long_here

# =============================================================================
# NGINX CONFIGURATION
# =============================================================================

# Nginx port (default: 80)
NGINX_PORT=80

# Nginx SSL port (default: 443)
NGINX_SSL_PORT=443

# =============================================================================
# SECRET MANAGEMENT RECOMMENDATIONS
# =============================================================================
#
# For production deployments, use one of these secret management solutions:
#
# 1. Doppler (Recommended)
#    - Install: curl -Ls --tlsv1.2 --proto "=https" --retry 3 https://cli.doppler.com/install.sh | sh
#    - Setup: doppler setup
#    - Usage: doppler run -- docker-compose up
#
# 2. 1Password CLI
#    - Install: brew install 1password-cli (macOS) or download from 1password.com
#    - Setup: op signin
#    - Usage: op run -- docker-compose up
#
# 3. AWS Systems Manager Parameter Store
#    - Store secrets as SecureString parameters
#    - Use AWS SDK to retrieve in application
#    - IAM roles required for access
#
# 4. HashiCorp Vault
#    - Self-hosted secret management
#    - Comprehensive access controls
#    - Audit logging
#
# =============================================================================

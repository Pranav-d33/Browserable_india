version: '3.8'

# =============================================================================
# Bharat Agents - Development Infrastructure
# =============================================================================
#
# This Docker Compose file sets up the development infrastructure:
# - PostgreSQL 16 (Database)
# - Redis 7 (Cache)
# - MinIO (S3-compatible storage)
# - MailHog (Email testing for OTP flows)
# =============================================================================

services:
  # =============================================================================
  # PostgreSQL Database
  # =============================================================================
  postgres:
    image: postgres:16-alpine
    container_name: bharat-agents-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-bharat_agents}
      POSTGRES_USER: ${POSTGRES_USER:-bharat_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-bharat_password}
      POSTGRES_INITDB_ARGS: '--encoding=UTF-8 --lc-collate=C --lc-ctype=C'
    ports:
      - '${POSTGRES_PORT:-5432}:5432'
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - core
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'pg_isready -U ${POSTGRES_USER:-bharat_user} -d ${POSTGRES_DB:-bharat_agents}',
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # =============================================================================
  # Redis Cache
  # =============================================================================
  redis:
    image: redis:7-alpine
    container_name: bharat-agents-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-} --appendonly yes
    ports:
      - '${REDIS_PORT:-6379}:6379'
    volumes:
      - redis-data:/data
    networks:
      - core
    healthcheck:
      test: ['CMD', 'redis-cli', '--raw', 'incr', 'ping']
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s

  # =============================================================================
  # MinIO (S3-compatible Storage)
  # =============================================================================
  minio:
    image: minio/minio:latest
    container_name: bharat-agents-minio
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
    command: server /data --console-address ":9001"
    ports:
      - '${MINIO_PORT:-9000}:9000'
      - '${MINIO_CONSOLE_PORT:-9001}:9001'
    volumes:
      - minio-data:/data
    networks:
      - core
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9000/minio/health/live']
      interval: 30s
      timeout: 20s
      retries: 3
      start_period: 40s

  # =============================================================================
  # MinIO Client (for bucket initialization)
  # =============================================================================
  minio-client:
    image: minio/mc:latest
    container_name: bharat-agents-minio-client
    depends_on:
      minio:
        condition: service_healthy
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
    command: >
      sh -c "
        echo 'Waiting for MinIO to be ready...' &&
        sleep 10 &&
        mc alias set local http://minio:9000 ${MINIO_ROOT_USER:-minioadmin} ${MINIO_ROOT_PASSWORD:-minioadmin} &&
        mc mb local/artifacts --ignore-existing &&
        mc policy set public local/artifacts &&
        echo 'MinIO setup complete!'
      "
    networks:
      - core
    restart: 'no'

  # =============================================================================
  # MailHog (Email Testing)
  # =============================================================================
  mailhog:
    image: mailhog/mailhog:latest
    container_name: bharat-agents-mailhog
    restart: unless-stopped
    ports:
      - '${MAILHOG_PORT:-8025}:8025' # Web UI
      - '${MAILHOG_SMTP_PORT:-1025}:1025' # SMTP
    networks:
      - core
    healthcheck:
      test:
        [
          'CMD',
          'wget',
          '--quiet',
          '--tries=1',
          '--spider',
          'http://localhost:8025/api/v2/messages',
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

# =============================================================================
# Networks
# =============================================================================
networks:
  core:
    driver: bridge
    name: bharat-agents-core

# =============================================================================
# Volumes
# =============================================================================
volumes:
  pgdata:
    driver: local
    name: bharat-agents-pgdata
  redis-data:
    driver: local
    name: bharat-agents-redis-data
  minio-data:
    driver: local
    name: bharat-agents-minio-data

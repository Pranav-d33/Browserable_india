# =============================================================================
# Bharat Agents - Environment Configuration
# =============================================================================
# 
# This file contains all required environment variables with safe defaults.
# Copy this file to .env and update the values for your environment.
#
# IMPORTANT: Never commit real secrets to version control!
# Use Doppler, 1Password, AWS SSM, or similar secret management tools.
# =============================================================================

# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================

# PostgreSQL connection URL
# Format: postgresql://username:password@host:port/database
# For local development, you can use Docker or a local PostgreSQL instance
POSTGRES_URL=postgresql://bharat_user:bharat_password@localhost:5432/bharat_agents

# =============================================================================
# CACHE CONFIGURATION
# =============================================================================

# Redis connection URL
# Format: redis://username:password@host:port/database
# For local development, you can use Docker or a local Redis instance
REDIS_URL=redis://localhost:6379/0

# =============================================================================
# STORAGE CONFIGURATION (S3-Compatible)
# =============================================================================

# S3-compatible storage endpoint
# For local development, you can use MinIO or similar
# For production, use AWS S3, DigitalOcean Spaces, etc.
S3_ENDPOINT=http://localhost:9000

# S3 access key (minimal permissions recommended)
# Create a dedicated user with only necessary permissions
S3_ACCESS_KEY=your_s3_access_key_here

# S3 secret key (store securely!)
# Use secret management tools like Doppler, 1Password, or AWS SSM
S3_SECRET_KEY=your_s3_secret_key_here

# =============================================================================
# SECURITY CONFIGURATION
# =============================================================================

# JWT secret for token signing (minimum 32 characters)
# Generate a strong random string for production
# Example: openssl rand -base64 32
JWT_SECRET=your_very_long_jwt_secret_key_at_least_32_characters_long_here

# =============================================================================
# AI/ML CONFIGURATION (Optional in Phase 0)
# =============================================================================

# OpenAI API key (optional - will use Gemini 2.0 Flash by default)
# Only required if you want to use OpenAI models
# OPENAI_API_KEY=sk-your-openai-api-key-here

# =============================================================================
# APPLICATION CONFIGURATION
# =============================================================================

# Node.js environment
# Options: development, production, test
NODE_ENV=development

# Application port
# Must be a valid positive integer
PORT=3000

# =============================================================================
# SECRET MANAGEMENT RECOMMENDATIONS
# =============================================================================
#
# For production environments, use one of these secret management solutions:
#
# 1. Doppler (Recommended)
#    - Install: curl -Ls --tlsv1.2 --proto "=https" --retry 3 https://cli.doppler.com/install.sh | sh
#    - Setup: doppler setup
#    - Usage: doppler run -- your-command
#
# 2. 1Password CLI
#    - Install: brew install 1password-cli (macOS) or download from 1password.com
#    - Setup: op signin
#    - Usage: op run -- your-command
#
# 3. AWS Systems Manager Parameter Store
#    - Store secrets as SecureString parameters
#    - Use AWS SDK to retrieve in application
#    - IAM roles required for access
#
# 4. HashiCorp Vault
#    - Self-hosted secret management
#    - Comprehensive access controls
#    - Audit logging
#
# =============================================================================
